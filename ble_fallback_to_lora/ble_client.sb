#include "RM1xx-defs.h"
#include "lib/ble.sblib"

        //Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                  1
        // size of s$[] and must be at least 8 elements for BleSvcRegDevInfo()     
#define NUM_OF_S_PARAMS                     (8)
        // Number of connections
#define NUM_OF_CONNS                         1

#define BL600_TEMP_SENSOR                   2

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  print "\n OnErr - ";GetLastError();"\n"
endsub
onerror next HandlerOnErr

//==============================================================================
//==============================================================================
sub AssertResCode(byval rc as integer,byval tag as integer)
  if rc!=0 then
    print "\nFailed with ";integer.h' rc;" at tag ";tag
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsgVal(byval msg$ as string, byval vl as integer)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$;" ";vl
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$
  endif
endsub

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim rc
dim looprc

dim s$[NUM_OF_S_PARAMS]    // must be at least 8 elements for BleSvcRegDevInfo()

dim sensorType

dim PrevAds$[8] //Previous adverts (size of 8 adverts)
dim PrevAdCount : PrevAdCount = 0 //Number of previous adverts

dim hc[NUM_OF_CONNS+1]      //contains connection handles
dim conns                   //number of connections
dim hcVsp                   //handle of connection to use for VSP service

dim uuid$ : uuid$ = "569a0000b87f490c92cb11ba5ea5167c"	//Laird's base UUID
dim uHndl
dim tempHVal

//==============================================================================
//release all connection handles
//==============================================================================
sub InitConnHandles()
  dim z
  for z=0 to (NUM_OF_CONNS)
    hc[z]=-1
  next
endsub
//==============================================================================
//==============================================================================
function AcqConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == -1 then
      hc[z]=hConn
      exitfunc z
    endif
  next
endfunc 0
//==============================================================================
//==============================================================================
function RelConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == hConn then 
      hc[z]=-1
      exitfunc z
    endif
  next
endfunc 0
//==============================================================================
//==============================================================================
sub ShowConnParms(nCtx as integer)
    dim intrvl,sprvto,slat
    rc= BleGetCurConnParms(nCtx,intrvl,sprvto,slat)
    AssertResCode(rc,1240)
    if rc==0 then
        DbgMsgVal("Conn Interval",intrvl)
        DbgMsgVal("Conn Supervision Timeout",sprvto)
        DbgMsgVal("Conn Slave Latency",slat)
        DbgMsg("\n")
    endif
endsub

//This function removes leading 0s from the front of a string
FUNCTION RemoveZeros(Data$) AS STRING
    dim i, Done, TmpStr$ : i = 0 : Done = 0
    while (i < strlen(Data$))
        TmpStr$ = MID$(Data$, i, 1)
        if (STRCMP(TmpStr$, "0") != 0) THEN
            //Other number found - cut string to this length and mark as finished
            TmpStr$ = RIGHT$(Data$, strlen(Data$)-i)
            i = strlen(Data$)
            Done = 1
        endif
        i = i+1
    endwhile

    if (Done == 0) THEN
        //Other number not found in provided string
        TmpStr$ = "0"
    endif
ENDFUNC TmpStr$

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function startDemo()
   dim at$
   dim atHndl

    select sensorType
    case BL600_TEMP_SENSOR
        print"Enable notification for BL600.\n"
        atHndl = 15
        at$="\01\00"
        rc = BleGattcWrite(hc[1],atHndl,at$)

    case else
        DbgMsgVal("Unknown Sensor", sensorType)
    endselect  

endfunc 1

//==============================================================================
// This handler is called when there is an advert timeout
//==============================================================================
function HandlerBlrAdvTimOut() as integer
    print "Adverts timeout\n"
endfunc 1

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
FUNCTION HandlerAdvRpt()
    print "HandlerAdvRpt\n"
    DIM periphAddr$, advData$, nRssi, TmpStr$, TmpStr2$, TmpVal
    // Read all cached advert reports
    looprc=BleScanGetAdvReport(periphAddr$, advData$, TmpVal, nRssi)

    // While we successfully got another report
    WHILE (looprc == 0)
        //Check if this advert was received recently
        TmpStr$ = periphAddr$ + advData$
        TmpVal = 0

        // Loop through all the recently received ads
        while (TmpVal < PrevAdCount)
            if (strcmp(TmpStr$, PrevAds$[TmpVal]) == 0) then
                // Already seen this advert, ignore it
                TmpVal = 254
            endif
            TmpVal = TmpVal+1
        endwhile

        if (TmpVal != 255) then // If Advert has not be seen before
            rc = BLEGETADBYTAG(advData$, 8, TmpStr$)
            if (rc == 0) then
                // Name found at index 0x08
                PRINT TmpStr$;"\n"
            else
                // Name not found at index 0x08, check 0x09
                rc = BLEGETADBYTAG(advData$, 9, TmpStr$)
                if (rc == 0) then
                    // Name found at index 0x09
                    PRINT TmpStr$;"\n"
                endif
            endif

            // Check if the advert has the name we are looking for, if it does, connect to it
            if (strcmp(TmpStr$, "LAIRD RM186_PE")==0) then
                sensorType = BL600_TEMP_SENSOR
                // Connect to the BL600 Temp Sensor
                rc = BleConnectCancel()
                print "Found the BL600. Connecting ...\n"
                rc = BleConnect(periphAddr$, 5000, 7500, 100000, 500000)
            endif

            // Output BT addr and RSSI
            print strhexize$(periphAddr$);", RSSI: ";nRssi;"\n"

            // Go through all tags and print them out
            PRINT "Advertising data [hex]:\n"
            TmpVal = 0
            while (TmpVal <= 0xff)
                if (TmpVal == 8) then
                    // Skip name tags
                    TmpVal = 10
                endif
                rc = BLEGETADBYTAG(advData$, TmpVal, TmpStr$)
                if (rc == 0) then
                    // Output tag
                    TmpStr2$ = ""
                    SPRINT #TmpStr2$,INTEGER.H'TmpVal
                    TmpStr2$ = RemoveZeros(TmpStr2$)
                    print "  Length: ";strlen(TmpStr$);", Type: 0x";TmpStr2$;", Value: ";STRHEXIZE$(TmpStr$);"\n"
                endif
                TmpVal = TmpVal+1
            endwhile

            //Newline
            PRINT "\n"

            //Check if the array is too large
            if (PrevAdCount > 6) then
                //Array too big - clear it
                TmpVal = 0
                while (TmpVal < 8)
                    PrevAds$[TmpVal] = ""
                    TmpVal = TmpVal+1
                endwhile
                PrevAdCount = 0
            endif

            //Add this adverts to the recent list
            TmpStr$ = periphAddr$ + advData$
            PrevAds$[PrevAdCount] = TmpStr$
            PrevAdCount = PrevAdCount+1
        endif
        looprc=BleScanGetAdvReport(periphAddr$, advData$, TmpVal, nRssi)
    ENDWHILE
ENDFUNC 1

//==============================================================================
//==============================================================================
function HandlerFindChar(hConn,cProp,hVal,hiUuid) as integer
    print " HandlerFindChar\n"
    print "hConn=";integer.h' hConn;",hIncUuid=";integer.h' hiUuid
    print ",hVal=";hVal;",Props=";integer.h' cProp;")"
    tempHVal = hVal
endfunc 1

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HndlrBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer
    print "HndlrBleMsg\n"
    dim hz
    dim rc,sIdx,cIdx,baseUuid$,uHndS$,uHndS,uHndC
    baseUuid$ = "569a0000b87f490c92cb11ba5ea5167c"
    print "Received a message with id " ;integer.h' nMsgId; "\n"
    select nMsgId
    case BLE_EVBLEMSGID_CONNECT
        hz = AcqConnHandle(nCtx)
        conns = conns + 1
        print "\n --- Connect: (";integer.h' nCtx;") handle=";hz
        if hz == 0 then
            //Could not store the handle so drop the connection
            rc = BleDisconnect(nCtx)
            print " DROPPED"
        else
            //accepted so display connection parameters
            ShowConnParms(nCtx)
            //always assume most recent connection for VSP
            hcVsp = hc[hz]
        endif

        uHndS$ = StrDehexize$(baseUuid$)
        uHndS = BleHandleUuid128(uHndS$)
        uHndC = BleHandleUuidSibling(uHnds,0x2A10)
        sIdx = 0
        cIdx = 0 //valHandle will be 32
        rc = BleGattcFindChar(nCtx,uHndS,sIdx,uHndC,cIdx)

        TimerStart(0,10000,0)

    case BLE_EVBLEMSGID_DISCONNECT
        hz = RelConnHandle(nCtx)
        conns = conns - 1
        print "\n --- Disconnect: (";integer.h' nCtx;") handle=";hz;"\n"

    case BLE_EVBLEMSGID_DISPLAY_PASSKEY
        DbgMsgVal("Display Pairing Passkey ",nCtx)

    case BLE_EVBLEMSGID_NEW_BOND
        DbgMsg(" +++ New Bond")

    case BLE_EVBLEMSGID_UPDATED_BOND
        DbgMsg(" +++ Updated Bond")

    case BLE_EVBLEMSGID_ENCRYPTED
        DbgMsg(" +++ Encrypted Connection")

    case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
        DbgMsgVal(" -- Conn to Bonded Master ",nCtx)

    case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
        DbgMsgVal(" +++ Auth Key Request, type=",nCtx)

    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        ShowConnParms(nCtx)

    case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
        DbgMsg(" ??? Conn Parm Negotiation FAILED")

    case else
        DbgMsgVal("Unknown Ble Msg", nMsgId)
    endselect
endfunc 1

//==============================================================================
//==============================================================================
function HandlerFindDesc(hConn,hDesc) as integer
    print "HandlerFindDesc\n"
    print "\nEVFINDDESC("
    print "hConn=";integer.h' hConn;",hDesc=";hDesc;")"
endfunc 1

//==============================================================================
//==============================================================================
function HandlerAttrWrite(hConn,aHndl,nSts) as integer
    print "HandlerAttrWrite\n"
    print "\nEVATTRWRITE(hConn=";integer.h' hConn;",handle=";aHndl;",status=";nSts;")"
endfunc 1

//==============================================================================
//==============================================================================
function HandlerAttrNtfyCmd() as integer
    dim hConn,hAttr,att$,dscd
    print "EVATTRNOTIFY() HandlerAttrNtfyCmd\n"
    do
        rc=BleGattcNotifyRead(hConn,hAttr,att$,dscd)
        if rc==0 then
            print "Notification from connection handle: "; hAttr;" The data: ";att$;"\n"
        endif
    dowhile rc==0
endfunc 1

//==============================================================================
//==============================================================================
function HandlerTimer0() as integer
    rc = startDemo()
    //rc = BleGattcRead(hc[1],tempHVal,0)
endfunc 1
//==============================================================================
//==============================================================================
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVBLE_ADV_TIMEOUT        call HandlerBlrAdvTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt

ONEVENT  EVBLEMSG                 call HndlrBleMsg

OnEvent  EVFINDCHAR               call HandlerFindChar
OnEvent  EVFINDDESC               call HandlerFindDesc
OnEvent  EVATTRWRITE              call HandlerAttrWrite
OnEvent  EVATTRNOTIFY             call HandlerAttrNtfyCmd

OnEvent  EVTMR0                   call HandlerTimer0

//==============================================================================
//==============================================================================
sub Startup()
    InitConnHandles()

    // Open the GATT client
    rc=BleGattcOpen(0,0)

    //Register base uuids with the underlying stack, otherwise the services with the
    //128bit uuid's will be delivered with a uuid handle == FF000000 == UNKNOWN
    uuid$ = "569a0000b87f490c92cb11ba5ea5167c"
    uuid$ = StrDehexize$(uuid$)
    uHndl = BleHandleUuid128(uuid$)
    uuid$ = "569a2a10b87f490c92cb11ba5ea5167c"
    uuid$ = StrDehexize$(uuid$)
    uHndl = BleHandleUuid128(uuid$)
    uuid$ = "569a2a6eb87f490c92cb11ba5ea5167c"
    uuid$ = StrDehexize$(uuid$)
    uHndl = BleHandleUuid128(uuid$)

    // Start scanning for BLE devices
    rc=BleScanStart(0,0)

endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

Startup()

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent
