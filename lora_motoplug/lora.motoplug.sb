#include "RM1xx-defs.h"

// The battery positive is connected to the SIO_6/AIN Pin. (ADC pin)
#define ADC_PIN 6

// Port to transmit data to the Lora Gateway(Anything in the 1-223 range,
// application specific)
#define PORT 5

// Method of activation (Over The Air Activation)
#define OTAA 1

//SIO4 is connected to the CS line
#define SPI_CS_PIN  4

// Miliseconds in an hour
#define HOUR 3600000

DIM rc
DIM ADC_reading
DIM data$
DIM Battery
DIM i: i = 1

SUB initiate_spi()
    DIM handle
    DIM wr$
    DIM rd$
    // Configure the Chip Select line
    // Set SPI_CS_PIN to be a digital output with a weak pull down resistance.
    rc=GpioSetFunc(SPI_CS_PIN,2,1)

    // ensure CS is not enabled
    GpioWrite(SPI_CS_PIN,1)

    //-------------------------------------------------------------
    //open the SPI interface
    //  Mode CPOL CPHA
    //    0   0   0
    //    1   0   1
    //    2   1   0
    //    3   1   1
    //-------------------------------------------------------------
    rc=SpiOpen(0,125000,0,handle)
    // Read op-code
    // 0x41
    // Write op-code
    // 0x40
    //
    // Configure Inputs/Outputs by writing 0x00 to register 0x00
    // IO7  IO6  IO5 IO4  IO3  IO2  IO1  IO0   // MCP23S08 pin
    // n/a  n/a  n/a  n/a LED4 LED3 LED2 LED1  // RM1xx DVK pin
    //  0    0    0   0    0    0    0    0    // 0=output 1=input
    // I/O Direction (IODIR) Register 0x00
    wr$="\40\00\00"
    GpioWrite(SPI_CS_PIN,0)
    rc=SpiWrite(wr$)
    GpioWrite(SPI_CS_PIN,1)
ENDSUB

FUNCTION count_integer_digits(number) As Integer
// Receives a number and returns the number of digits
// The number is expected to be an integer in decimal format.
    DIM count
    count = 0
    while(number != 0)
        number = number/10
        count = count + 1
    endwhile
ENDFUNC count

FUNCTION convert_bat_from_ADC_reading(ADC_read)
    //ADC sensitivity equation:
    // 2^n/Reference Voltage = ADC reading/Analog Voltage
    //1024/3.6 = ADC reading/Analog Voltage
    // Analog Voltage = ADC reading * 3.6 / 1024
    // Fixed point arithmetic: multiplied by 100
    battery = (ADC_read*360)/1024

    // Used voltage divider to supply voltage to the ADC pin because it cannot
    // handle voltages in the 10 - 16 range.
    // The resistances used are 1 KOhm and 12.5 KOhm. The output voltage is:
    //Vout = R1+ (Vin /R1+R2) --> Vout = 13.5*Vin
    // Fixed point arithmetic: multiplied by 10
    battery = battery *135
ENDFUNC battery

SUB print_battery(battery)
    DIM Batterydiv
    DIM Batterymod

    // Convert fixed point to decimal point.
    batterydiv = battery/1000
    batterymod = battery%1000

    print "Reading voltage... "

    // Add preceding zeros. If the number after the decimal point is less than 3
    // digits when printed the preceding zeros are ommitted and the significance
    // changes. eg: battery = 12010. batterydiv = 12. batterymod = 015
    // If we did not add preceding zeros the printed result would be 12.15 which
    // is not the intented one (12.015).
    if (count_integer_digits(batterymod)==2) then
        SPRINT #Data$,integer.d' Batterydiv; ".0";batterymod; " V\n"
        print Data$
    elseif (count_integer_digits(batterymod)==1) then
        SPRINT #Data$,integer.d' Batterydiv; ".00";batterymod; " V\n"
        print Data$
    else
        print Batterydiv; "."; Batterymod; " V\n"
    endif
ENDSUB

FUNCTION HandlerTimer0()
    ADC_reading = GpioRead(ADC_PIN)

    Battery = convert_bat_from_ADC_reading(ADC_reading)
    print_battery(battery)

    SPRINT #Data$,integer.d' battery/1000
    rc = LORAMACTxData(PORT,Data$, 0)
    print "frame count is ";i; "\n"
    i = i + 1
    timerstart(0,HOUR,0)
ENDFUNC 1

FUNCTION LoramacJoining() As Integer
    print "Joining\n"
ENDFUNC 1

FUNCTION LoramacJoined() As Integer
    print "Joined\n"
ENDFUNC 1

FUNCTION LoramacJoinFailed() As Integer
    print "Join Failed\n"
    rc = LORAMACJoin(OTAA)
ENDFUNC 1

FUNCTION LoramacTxComplete() As Integer
    print "Tx complete\n"
ENDFUNC 1

FUNCTION LoramacRxTimeout() As Integer
    print "Rx Timeout\n"
    rc = LORAMACJoin(OTAA)
ENDFUNC 1

FUNCTION LoramacTxDone() As Integer
    print "Tx Done\n"
ENDFUNC 1

FUNCTION LoramacTxTimeout() As Integer
    print "Tx Timeout\n"
ENDFUNC 1

FUNCTION Loramacrxcomplete()
    print "Rxcomplete: Received some data from the server\n"
ENDFUNC 1

SUB setLEDs(val)
    DIM wr$
    GpioWrite(SPI_CS_PIN,0)
    // Write (opcode 0x40) PORT/GPIO Register (0x09)
    wr$="\40\09"
    // Add the value that was passed in to the SPI command
    rc=strsetchr(wr$,val,2)
    rc=SpiWrite(wr$)
    GpioWrite(SPI_CS_PIN,1)
ENDSUB

SUB turn_led_on()
    setLEDs(1)
ENDSUB

SUB turn_led_off()
    setLEDs(0)
ENDSUB

FUNCTION Loramac_received_data()
    dim data$, ON$, OFF$ : ON$ = "ON" : OFF$ = "OFF"
    dim nRSSI,nPort,nSNR

    rc = LORAMACRxData(data$, nRSSI, nPort, nSNR)
    print "\nLoRa Received downstream data on port ";nPort;"\nRSSI: ";nRSSI;"   SNR: ";nSNR;"\n";data$;""
    if strcmp(ON$, data$) == 0 then
        print "found the command ON\n"
        turn_led_on()
    endif
    if strcmp(OFF$, data$) == 0 then
        print "found the command OFF\n"
        turn_led_off()
    endif
ENDFUNC 1

FUNCTION HandlerChange0()
    print "A button has beeen pressed\n"
    rc = HandlerTimer0()
ENDFUNC 1

ONEVENT EVLORAMACJOINING            CALL LoramacJoining
ONEVENT EVLORAMACJOINED             CALL LoramacJoined
ONEVENT EVLORAMACJOINFAILED         CALL LoramacJoinFailed
ONEVENT EVLORAMACTXCOMPLETE         CALL LoramacTxComplete
ONEVENT EVLORAMACRXTIMEOUT          CALL LoramacRxTimeout
ONEVENT EVLORAMACTXTIMEOUT          CALL LoramacTxTimeout
ONEVENT EVLORAMACTXDONE             CALL LoramacTxDone
ONEVENT EVTMR0                      CALL HandlerTimer0
ONEVENT EVLORAMACRXDATA             CALL Loramac_received_data
ONEVENT EVLORAMACRXCOMPLETE         CALL Loramacrxcomplete

ONEVENT EVGPIOCHAN0                 CALL HandlerChange0
//==============================================================================
// Main program

initiate_spi()
// Set the ADC Pin to 1/3 scaling making the reference voltage 3.6Volts instead
// of 1.2Volts.
rc = GpioSetFunc(ADC_PIN,3,0x13)

// Iniate join procedure using the Over the Air Activation.
rc = LORAMACJoin(OTAA)
// Bind the pressing of input pin 5 to event gpiochan0
rc = gpiobindevent(0,5,1)

rc = HandlerTimer0()
WAITEVENT
