#include "RM1xx-defs.h"

        // size of i[]
#define NUM_OF_I_PARAMS                     (8)
        // size of s$[] and must be at least 8 elements for BleSvcRegDevInfo()     
#define NUM_OF_S_PARAMS                     (8)

Dim rc
Dim data$
Dim x
dim tlen,tkn$
dim i[NUM_OF_I_PARAMS]      // index 0 used for return values
dim s$[NUM_OF_S_PARAMS]    // must be at least 8 elements for BleSvcRegDevInfo()
dim urtcmd$                 //cmd line from uart
dim urts
dim stRsp$
dim str$
dim reg
dim stringVal$
dim numnosync
dim packettype

SUB PrintMsg(str$)
	print str$
ENDSUB 


//==============================================================================
//-------------------------------------------------------------------------
function ExtractIntTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractIntToken(u$,i[stIdx])
    if tlen == 0 then
      exitfunc 4
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractStrTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractStrToken(u$,s$[stIdx])
    if tlen == 0 then
      exitfunc 3
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
// Timer0 handler - used to control the sending of a data packet
//-------------------------------------------------------------------------
FUNCTION HandlerTimer0()
	str$ = "\n---------------------------------------\n"
	PrintMsg(str$)
	packettype = 1
	rc = LORAMACTxData(2,data$, 1)
	if rc != 0 then
		str$ =  "\nData payload too large"	
	endif
ENDFUNC 1

//-------------------------------------------------------------------------
// Joining event
//-------------------------------------------------------------------------
FUNCTION LoramacJoining() As Integer
 	str$ = "\nJoining"
	PrintMsg(str$)
endfunc 1

//-------------------------------------------------------------------------
// Joined event
//-------------------------------------------------------------------------
FUNCTION LoramacJoined() As Integer
	str$ = "\nSuccessfully Joined network"
 	PrintMsg(str$)
	// Start timer until first packet gets transmitted
	TimerStart(0,10000,0) 
endfunc 1

//-------------------------------------------------------------------------
// Joined fail event
//-------------------------------------------------------------------------
FUNCTION LoramacJoinFailed() As Integer
	rc = LORAMACJoin(1)
 	sprint #str$,"\nJoin Failed"
 	PrintMsg(str$)
endfunc 1

//-------------------------------------------------------------------------
// Tx complete event - marks the end of a transmit/receive cycle
//-------------------------------------------------------------------------
FUNCTION LoramacTxComplete() As Integer
 	str$ = "\nTxComplete event received - next packet can be loaded"
 	PrintMsg(str$)
	TimerStart(0,25000,0)
endfunc 1

//-------------------------------------------------------------------------
// RxData event - data has been received from the gateway
//-------------------------------------------------------------------------
FUNCTION HandlerRxData() As Integer
	dim datastr$ as string
	dim rssi$ as integer
	dim port$ as integer
	dim snr$ as integer
	rc = LORAMACRxData(datastr$,rssi$,port$,snr$)
	sprint #str$,"\n\22";datastr$;"\22 received from the gateway"
	PrintMsg(str$)
	sprint #str$,"\nReceived packet rssi: ";rssi$;" snr: ";snr$
	PrintMsg(str$)
endfunc 1

//--------------------------------------------------------------------------------------------------------------------------
// Rx complete event - also marks the end of a transmit/receive cycle when using confirmed packets or the gateway sends data
//--------------------------------------------------------------------------------------------------------------------------
FUNCTION LoramacRxComplete() As Integer
 	//str$ = "\nRx completed "
 	//PrintMsg(str$)
endfunc 1

//-------------------------------------------------------------------------
// RxTimeout event 
// returned after every missed 
//-------------------------------------------------------------------------
FUNCTION LoramacRxTimeout() As Integer
 	str$ = "\nRx Timeout"
	PrintMsg(str$)
	rc = LORAMACTxData(2,data$, 1)
	print "\ntx rc = ";integer.h' rc
endfunc 1

//-------------------------------------------------------------------------
// TxTimeout event
//-------------------------------------------------------------------------
FUNCTION LoramacTxTimeout() As Integer
 	str$ = "\nTx Timeout"
	PrintMsg(str$)
	TimerStart(0,25000,0)  			
endfunc 1

//-------------------------------------------------------------------------
// RxError event - crc error
//-------------------------------------------------------------------------
FUNCTION LoramacRxError() As Integer
 	str$ = "\nRx Error"
	PrintMsg(str$)
	TimerStart(0,25000,0)  			
endfunc 1

//-------------------------------------------------------------------------
// LinkResponse event - a response to a LinkCheck has been received
//-------------------------------------------------------------------------
FUNCTION LoramacLinkResponse(Margin, Gateways) As Integer
	sprint #str$,"\nMargin: ";Margin
	PrintMsg(str$)
endfunc 1

//-------------------------------------------------------------------------
// TxDone event - packet has been transmitted to the gateway
//-------------------------------------------------------------------------
FUNCTION HandlerTxDone() As Integer
	numnosync = 0
	if packettype == 0 then
		str$ = "\nTxDone event received - JoinRequest transmitted to the gateway"
	else
		sprint #str$,"\nTxDone event received - \22";data$;"\22 sent to gateway"
	endif
	PrintMsg(str$)
endfunc 1

//------------------------------------------------------------------------------
// NoSync event - an RxWindow has closed after it failed to receive a sync pulse
//------------------------------------------------------------------------------
FUNCTION HandlerNoSync() As Integer
	if numnosync == 0 then
		str$ = "\nFirst receive window timed out"
		numnosync = 1
	else
		str$ = "\nSecond receive window timed out"
		numnosync = 0
	endif
	PrintMsg(str$)
endfunc 1

FUNCTION HandlerAdr() As Integer
	dim dr$,pow$
	str$ = "\nAdr received - "
	PrintMsg(str$)
	rc = LORAMACGetOption(LORAMAC_OPT_TX_POWER, pow$)
	rc = LORAMACGetOption(LORAMAC_OPT_DATA_RATE, dr$)
	sprint #str$,"power ";pow$;" datarate ";dr$;"\n"
	PrintMsg(str$)
endfunc 1

//-------------------------------------------------------------------------
//#CMD#// lora update param$   #INTvalue# 
//#CMD#// lora readparam  param$  #INTvalue# 
//#CMD#// lora readreg  #INTreg#  #INTvalue# 
//#CMD#// lora pollregs 
//#CMD#// lora tx 
//#CMD#// lora txpkts1 #INTfrequencyChannel# #INTDataRate# #INTPowerBand # #INThandle#
//#CMD#// lora cancel #INThandle#
//-------------------------------------------------------------------------
function _Lora()
  dim prAdr$ 
	dim val
	dim res
	dim tkn$

  tlen = ExtractStrToken(urtcmd$,tkn$)
  if tlen == 0 then
    exitfunc 5
  endif

  // sends a JoinRequest to the gateway
	if strcmp(tkn$,"join")==0 then
		packettype = 0
		rc = ExtractIntToken(urtcmd$,val)
		rc = LORAMACJoin(val)
		exitfunc 0
	endif

  // Calls the LoramacGetOption command -  outputs some of the configuration options
	if strcmp(tkn$,"get")==0 then
		rc = ExtractIntToken(urtcmd$,reg)
		rc = LORAMACGetOption(reg, stringVal$)
		sprint #str$,stringVal$;"\n"
		PrintMsg(str$)
		exitfunc 0
	endif
	
  // Transmits a LinkCheck command
	if strcmp(tkn$,"link")==0 then
		exitfunc LORAMACLinkCheck()
	endif

  // Calls the LoramacSetOption command - sets some of the configuration optons
  if strcmp(tkn$,"set")==0 then
		rc = ExtractIntToken(urtcmd$,reg)
		tlen = ExtractStrToken(urtcmd$,tkn$)
		if tlen != 0 then
			rc = LORAMACSetOption(reg, tkn$)
			print "\n";integer.h' rc
			if rc == 0 then
				sprint #str$,"\n";integer.h' rc;" ";tkn$
			else
				sprint #str$,"\n";integer.h' rc
			endif
			PrintMsg(str$)
		endif
		exitfunc 0
	endif
	
  // enables/disables the debug option
	if strcmp(tkn$,"debug")==0 then
		rc = ExtractIntTokens(urtcmd$,0,3)
		if rc == 0 then
			rc = LORAMACSetDebug(i[0],i[1],i[2])
		endif
		exitfunc rc
	endif

	
 endfunc 5

//==============================================================================
//==============================================================================
function OnUartCmd() as integer
  rc=1 //assume there is an error
  tlen = ExtractStrToken(urtcmd$,tkn$) //get first token
  if tlen == 0 then
    rc=0
  elseif tlen > 0 then
    
    if strcmp(tkn$,"lora")==0 then
      rc = _Lora()
			if rc != 0 then
				sprint #str$,"\nError ";integer.h' rc
				PrintMsg(str$)
			endif
      
    elseif (strcmp(tkn$,"exit")==0)||(strcmp(tkn$,"stop")==0) then
      print "\nType..\nRESUME          to continue the application"
      print "\n? VARNAME       to inspect a variable"    
      print "\n= VARNAME VALUE to change a variable"    
      stop 
      rc=0
    
    endif
  endif
endfunc 1


//==============================================================================
//==============================================================================
function HandlerUartRxCmd() as integer
  dim nMatch
  
  if urts < 0 then
    //uart parser is suspended
    exitfunc 1
  endif

  //check if CR has been received
  nMatch=UartReadMatch(stRsp$,13)
  if nMatch!=0 then
    //CR exists in the input buffer
    urtcmd$ = strsplitleft$(stRsp$,nMatch)
    exitfunc OnUartCmd()
  endif
endfunc 1

ONEVENT EVLORAMACJOINING	CALL LoramacJoining
ONEVENT EVLORAMACJOINED	CALL LoramacJoined
ONEVENT EVLORAMACJOINFAILED	CALL LoramacJoinFailed
ONEVENT EVLORAMACTXCOMPLETE	CALL LoramacTxComplete
ONEVENT EVLORAMACRXTIMEOUT CALL LoramacRxTimeout
ONEVENT EVLORAMACTXTIMEOUT CALL LoramacTxTimeout
ONEVENT EVLORAMACRXERROR CALL LoramacRxError
ONEVENT EVLORAMACRXCOMPLETE	CALL LoramacRxComplete
ONEVENT EVLORAMACLINKCHECKRESPMSG CALL LoramacLinkResponse
ONEVENT EVTMR0			CALL HandlerTimer0
ONEVENT EVUARTRX CALL HandlerUartRxCmd
ONEVENT EVLORAMACTXDONE CALL HandlerTxDone
ONEVENT EVLORAMACNOSYNC CALL HandlerNoSync
ONEVENT EVLORAMACADR CALL HandlerAdr
ONEVENT EVLORAMACRXDATA CALL HandlerRxData

// Initialise variables
data$ = "hello world"
numnosync = 0
packettype = 0

rc = LORAMACJoin(1)

WAITEVENT


